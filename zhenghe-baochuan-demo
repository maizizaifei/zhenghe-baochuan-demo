<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0">
    <title>贞观计划 - 郑和宝船航行体验</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "PingFang SC", "Microsoft YaHei", sans-serif;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            background: linear-gradient(to bottom, #1a2980, #26d0ce);
            color: #fff;
            line-height: 1.6;
            overflow: hidden;
            height: 100vh;
            position: relative;
        }
        
        #container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }
        
        #canvas {
            display: block;
            width: 100%;
            height: 100%;
        }
        
        .ui-panel {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 10px;
            max-width: 320px;
            backdrop-filter: blur(10px);
            z-index: 10;
        }
        
        h1 {
            font-size: 1.4rem;
            margin-bottom: 8px;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
        }
        
        .slider-container {
            margin: 12px 0;
        }
        
        .slider-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 0.9rem;
        }
        
        .slider {
            width: 100%;
            height: 5px;
            -webkit-appearance: none;
            appearance: none;
            background: rgba(255, 255, 255, 0.2);
            outline: none;
            border-radius: 5px;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #8a3324;
            cursor: pointer;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
        }
        
        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            z-index: 100;
            background: rgba(0, 0, 0, 0.8);
            padding: 30px;
            border-radius: 15px;
        }
        
        .loader {
            width: 48px;
            height: 48px;
            border: 5px solid #8a3324;
            border-bottom-color: transparent;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
            margin-bottom: 15px;
        }
        
        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        #status {
            font-size: 0.9rem;
            margin-top: 15px;
            color: #ccc;
        }
        
        @media (max-width: 480px) {
            .ui-panel {
                left: 10px;
                right: 10px;
                max-width: none;
            }
            
            h1 {
                font-size: 1.2rem;
            }
        }
    </style>
</head>
<body>
    <div id="container">
        <canvas id="canvas"></canvas>
        
        <div class="ui-panel">
            <h1>郑和宝船航行体验</h1>
            <div class="slider-container">
                <div class="slider-label">
                    <span>风暴强度</span>
                    <span id="storm-value">0.5</span>
                </div>
                <input type="range" min="0" max="1" step="0.01" value="0.5" class="slider" id="storm-slider">
            </div>
            
            <div class="slider-container">
                <div class="slider-label">
                    <span>航行速度</span>
                    <span id="speed-value">0.5</span>
                </div>
                <input type="range" min="0" max="1" step="0.01" value="0.5" class="slider" id="speed-slider">
            </div>
            
            <div id="status">就绪: 等待交互</div>
        </div>
        
        <div id="loading">
            <div class="loader"></div>
            <p>贞观引擎加载中</p >
            <p>请稍候...</p >
        </div>
    </div>

    <!-- Three.js 库 -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        // 贞观引擎核心代码
        document.addEventListener('DOMContentLoaded', function() {
            // 初始化变量
            let scene, camera, renderer;
            let ship, ocean;
            let stormIntensity = 0.5;
            let shipSpeed = 0.5;
            let clock = new THREE.Clock();
            
            // 显示加载界面
            const loadingElement = document.getElementById('loading');
            const statusElement = document.getElementById('status');
            
            // 初始化场景
            function init() {
                // 创建场景
                scene = new THREE.Scene();
                
                // 创建相机
                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
                camera.position.set(0, 5, 15);
                
                // 创建渲染器
                renderer = new THREE.WebGLRenderer({
                    canvas: document.getElementById('canvas'),
                    antialias: true,
                    alpha: true
                });
                renderer.setSize(window.innerWidth, window.innerHeight);
                renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
                
                // 添加光源
                const ambientLight = new THREE.AmbientLight(0x404040);
                scene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(1, 1, 1);
                scene.add(directionalLight);
                
                // 创建海洋
                createOcean();
                
                // 加载宝船模型
                loadShipModel();
                
                // 添加天空盒
                createSkybox();
                
                // 添加雾效果
                scene.fog = new THREE.FogExp2(0x1a2980, 0.02);
                
                // 绑定窗口调整事件
                window.addEventListener('resize', onWindowResize);
                
                // 绑定滑块事件
                document.getElementById('storm-slider').addEventListener('input', function(e) {
                    stormIntensity = parseFloat(e.target.value);
                    document.getElementById('storm-value').textContent = stormIntensity.toFixed(2);
                    updateStormEffect();
                });
                
                document.getElementById('speed-slider').addEventListener('input', function(e) {
                    shipSpeed = parseFloat(e.target.value);
                    document.getElementById('speed-value').textContent = shipSpeed.toFixed(2);
                    updateShipMovement();
                });
                
                // 隐藏加载界面
                setTimeout(() => {
                    loadingElement.style.display = 'none';
                    statusElement.textContent = "加载完成！拖动滑块与场景交互";
                }, 1500);
                
                // 开始动画循环
                animate();
            }
            
            // 创建海洋
            function createOcean() {
                const oceanGeometry = new THREE.PlaneGeometry(100, 100, 50, 50);
                const oceanMaterial = new THREE.MeshPhongMaterial({
                    color: 0x1c5bb8,
                    wireframe: false,
                    transparent: true,
                    opacity: 0.9
                });
                
                ocean = new THREE.Mesh(oceanGeometry, oceanMaterial);
                ocean.rotation.x = -Math.PI / 2;
                ocean.position.y = -2;
                scene.add(ocean);
            }
            
            // 加载宝船模型
            function loadShipModel() {
                // 创建临时宝船模型 (实际项目中应使用GLTF模型)
                const shipGroup = new THREE.Group();
                
                // 船体
                const hullGeometry = new THREE.BoxGeometry(4, 1, 1);
                const hullMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 });
                const hull = new THREE.Mesh(hullGeometry, hullMaterial);
                hull.position.y = 0.5;
                shipGroup.add(hull);
                
                // 甲板
                const deckGeometry = new THREE.BoxGeometry(3.5, 0.1, 0.8);
                const deckMaterial = new THREE.MeshPhongMaterial({ color: 0xD2691E });
                const deck = new THREE.Mesh(deckGeometry, deckMaterial);
                deck.position.y = 1.1;
                shipGroup.add(deck);
                
                // 桅杆
                const mastGeometry = new THREE.CylinderGeometry(0.1, 0.1, 4);
                const mastMaterial = new THREE.MeshPhongMaterial({ color: 0x8B4513 });
                const mast = new THREE.Mesh(mastGeometry, mastMaterial);
                mast.position.y = 3;
                shipGroup.add(mast);
                
                // 船帆
                const sailGeometry = new THREE.PlaneGeometry(1.5, 2.5);
                const sailMaterial = new THREE.MeshPhongMaterial({ 
                    color: 0xF5F5DC,
                    side: THREE.DoubleSide
                });
                const sail = new THREE.Mesh(sailGeometry, sailMaterial);
                sail.position.y = 2;
                sail.position.z = 0.2;
                sail.rotation.y = Math.PI;
                shipGroup.add(sail);
                
                ship = shipGroup;
                scene.add(ship);
            }
            
            // 创建天空盒
            function createSkybox() {
                const skyGeometry = new THREE.SphereGeometry(500, 32, 32);
                const skyMaterial = new THREE.MeshBasicMaterial({
                    color: 0x1a2980,
                    side: THREE.BackSide
                });
                
                const skybox = new THREE.Mesh(skyGeometry, skyMaterial);
                scene.add(skybox);
            }
            
            // 更新风暴效果
            function updateStormEffect() {
                // 更新海洋波浪
                if (ocean) {
                    const time = clock.getElapsedTime();
                    const positions = ocean.geometry.attributes.position.array;
                    
                    for (let i = 0; i < positions.length; i += 3) {
                        const x = positions[i];
                        const z = positions[i + 2];
                        positions[i + 1] = Math.sin(x * 0.2 + time * 0.5) * Math.cos(z * 0.2 + time * 0.5) * stormIntensity * 2;
                    }
                    
                    ocean.geometry.attributes.position.needsUpdate = true;
                    ocean.geometry.computeVertexNormals();
                }
                
                // 更新场景色调
                if (stormIntensity > 0.7) {
                    renderer.setClearColor(new THREE.Color(0x303030));
                } else if (stormIntensity > 0.4) {
                    renderer.setClearColor(new THREE.Color(0x1a2980));
                } else {
                    renderer.setClearColor(new THREE.Color(0x1a2980));
                }
            }
            
            // 更新船舶运动
            function updateShipMovement() {
                if (ship) {
                    // 模拟船舶随波浪摆动
                    const time = clock.getElapsedTime();
                    ship.rotation.z = Math.sin(time * 0.8) * 0.05 * stormIntensity;
                    ship.rotation.x = Math.sin(time * 0.5) * 0.03 * stormIntensity;
                    
                    // 船舶前后移动
                    ship.position.x = Math.sin(time * 0.3 * shipSpeed) * 5;
                }
            }
            
            // 窗口调整大小
            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }
            
            // 动画循环
            function animate() {
                requestAnimationFrame(animate);
                
                const delta = clock.getDelta();
                
                // 更新风暴效果
                updateStormEffect();
                
                // 更新船舶运动
                updateShipMovement();
                
                // 渲染场景
                renderer.render(scene, camera);
            }
            
            // 初始化应用
            init();
        });
    </script>
</body>
</html>
